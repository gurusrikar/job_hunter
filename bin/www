#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('edplus-dashboard:server');
var http = require('http');
var sock = require('socket.io');
var mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Connect to database
 */
connect()
    .on('error', console.log)
    .on('disconnected', connect);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket redirect events
 */

var io = sock.listen(server);
var clientDevices = {};

io.on('connection', function (socket) {
    socket.on('alexa', function (msg) {
        console.log('alexa msg '+msg);
        io.emit('redirect', msg);
    });

    socket.on('namaste', function (devName) {
        console.log('new client device connected ' + devName);
        clientDevices[devName] = socket.id;
        io.to(clientDevices[devName]).emit('redirect', 'dashFrame.html');
    })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

function connect() {
    var options = { server: { socketOptions: { keepAlive: 1 } } };
    console.log("connected to mongo: mongodb://localhost:27017/jobs-assistant");
    return mongoose.connect("mongodb://localhost:27017/jobs-assistant", options).connection;
}

module.exports.io = io;
module.exports.clientDevices = clientDevices;